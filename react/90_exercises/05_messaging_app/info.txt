Messaging App Reactilla

Tehdään messaging app, jossa on neljä pagea. Ensin on Loginpage, jossa logataan sisään.
Sitten on sivu omien viestien lukemiselle sekä sivut viestien lähettämiseen muille.
Listataan potentiaaliset viestin kohteet listaan ja kuten shopping appin remove button
jokaiselle riville laitetaan nappi, jolla siirrytään lähetyssivulle. Tunnistamiseen
käytetään id:tä kuten Shopping appin removeFromList-funktiossa. Jokainen rekisteröitynyt
käyttäjä saa appsilta  access tokenin lisäksi messagetokenin, jolla kyseiselle käyttäjälle
lähetetyt viestit tunnistetaan. Eli kun viesti lähetetään kohteelle viestikentän (message)
lisäksi bodyyn laitetaan kohteen "messagetoken". Backend palauttaa automaattisesti käyttäjälle
tarkoitetut viestit pyydettäessä.

Create a messaging app with four pages. First a LoginPage as usual. Then you a have a page for
reading your own messages and sending messages to others. Messages are loaded
like shoppingitems in shopping app with remove button. There is no ability to edit
messages after they are sent. Every registered user gets an access token on each login
but also one message token which is used to recognize his/hers messages. When we send
a message to target we add the messagetoken to the body of the request. Backend
returns your messages automatically when asked.

/register POST rekisteröinti tavalliseen tapaan. Register normally
/login POST login tavalliseen tapaan, mukana token accessiin. Login normally
/logout POST

/api/messages GET vaatii loginin ja tokenin headeriin. Palauttaa itselle tulleet messaget
muodossa. Requires login and token in the header. Returns your messages.
[
  {
    "from": "test2",
    "messagetoken": "9Ei4ghA9E7Ce6j03",
    "message": "moi",
	"id":100
  },
  {
    "from": "test",
    "messagetoken": "9Ei4ghA9E7Ce6j03",
    "message": "moi",
	"id":101
  }
]

/api/messages POST vaatii tokenin headeriin ja bodyn muodossa. Requires token
in the header and body as is below
{
	"message": <haluttu viesti>,
	"messagetoken: Kohteen messagetoken.
}

/api/users GET vaatii tokenin headeriin. Palauttaa kaikkien usereiden perustiedot
arrayssa viestien lähettämistä varten. Rakenne.
This returns all currently registered users for message sending. Requires token in the header.
[
  {
    "username": "test3",
    "messagetoken": "EHEFJ8JJG80I1730"
  }
]

HOX!! Muistakaa vite.config.ts:ään proxyt frontissa. Katsokaa ohjeistus Shopping Appsista.
Remember vite.config.ts for proxy to backend. Look at Shopping App for details!